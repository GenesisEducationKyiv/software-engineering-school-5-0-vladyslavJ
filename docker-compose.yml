services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: weatherdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 10

  weather:
    build:
      context: .
      dockerfile: apps/weather/Dockerfile
    container_name: weather
    env_file:
      - apps/weather/.env
    ports:
      - '5000:5000'
    depends_on:
      - redis

  subscription:
    build:
      context: .
      dockerfile: apps/subscription/Dockerfile
    container_name: subscription
    env_file:
      - apps/subscription/.env
    ports:
      - '4000:4000'
    depends_on:
      - postgres
    restart: on-failure

  email:
    build:
      context: .
      dockerfile: apps/email/Dockerfile
    container_name: email
    env_file:
      - apps/email/.env
    ports:
      - '8888:8888'

  notification:
    build:
      context: .
      dockerfile: apps/notification/Dockerfile
    container_name: notification
    env_file:
      - apps/notification/.env
    ports:
      - '6600:6600'
    depends_on:
      - email
      - subscription

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: api-gateway
    env_file:
      - apps/api-gateway/.env
    ports:
      - '3000:3000'
    depends_on:
      - weather
      - subscription
      - notification

volumes:
  pgdata:
